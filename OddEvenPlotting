import numpy as np
import matplotlib.pyplot as plt

def initialize_grid(n):
    grid = np.full((n, n), -5, dtype=int)  # Initialize with all cells set to -5
    center = n // 2
    grid[center][center] = 0  # Place player at the center with length 0
    return grid

def random_walk(grid, steps):
    import random
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # Right, Left, Down, Up
    current_position = len(grid) // 2, len(grid) // 2  # Start at the center
    visited = set()
    visited.add(current_position)
    grid[current_position[0]][current_position[1]] = 0
    length = 0  # Initialize the length of the walk

    for step in range(1, steps + 1):
        possible_directions = []
        for direction in directions:
            new_position = (current_position[0] + direction[0], current_position[1] + direction[1])
            if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and new_position not in visited:
                possible_directions.append(direction)

        if possible_directions:
            direction = random.choice(possible_directions)
            new_position = (current_position[0] + direction[0], current_position[1] + direction[1])
            grid[new_position[0]][new_position[1]] = step  # Mark the new position with current step number
            current_position = new_position
            visited.add(current_position)
            length += 1  # Increment the length of the walk

        else:
            # print("Nowhere to go! Stopping.")
            break

    return length

# Define the size of the grid and number of steps
grid_size = 5
steps = grid_size * grid_size
num_simulations = 100000  # Number of simulations to run

# Simulate random walks
walk_lengths = []
for _ in range(num_simulations):
    grid = initialize_grid(grid_size)
    walk_length = random_walk(grid, steps)
    walk_lengths.append(walk_length)

# Count frequencies of walk lengths
length_counts = {}
for length in walk_lengths:
    if length in length_counts:
        length_counts[length] += 1
    else:
        length_counts[length] = 1

# Separate odd and even lengths
odd_lengths = [length for length in length_counts if length % 2 != 0]
even_lengths = [length for length in length_counts if length % 2 == 0]
odd_counts = [length_counts[length] for length in odd_lengths]
even_counts = [length_counts[length] for length in even_lengths]

# Plotting
plt.bar(odd_lengths, odd_counts, color='r', label='Odd Lengths')
plt.bar(even_lengths, even_counts, color='g', label='Even Lengths')
plt.xlabel('Walk Length')
plt.ylabel('Frequency')
plt.title('Frequency of Walk Lengths')
plt.legend()
plt.show()
